AWSTemplateFormatVersion: 2010-09-09
Description: Provise Test System.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - 
        Label:
          default: System Configuration
        Parameters:
          - Env
          - Stack
          - Owner
      - 
        Label:
          default: SSM Paramter Store Key Configuration
        Parameters:
          - KeyCidrBlock
          - KeyPersonalIp1

    ParameterLabels:
      Stack:
        default: 'Stack: *Only lowercase alphanumeric characters and hyphens are allowed.'
      Owner:
        default: 'Owner: *Only lowercase alphanumeric characters and hyphens are allowed. Please put a hyphen between your first name and last name.'

#---------------------------------------------------------#
# Input Parameters
#---------------------------------------------------------#
Parameters:
  Env:
    Description: Specify the Env Tag. 
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - stage
      - test
      - dev
      - common

  Stack:
    Description: Specify the Stack Tag.
    Type: String
    Default: ezapp
    AllowedPattern: ^[a-z]([\-]{0,1}[a-z0-9]+)*$
    ConstraintDescription: This Parameter must match pattern ^[a-z]([\-]{0.1}[a-z0-9]+)*$

  Owner:
    Description: Enter the name of the person creating this stack.
    Type: String
    Default: masaki-ishimoto
    AllowedPattern: ^[a-z]([\-]{0,1}[a-z0-9]+)*$
    ConstraintDescription: This Parameter must match pattern ^[a-z]([\-]{0.1}[a-z0-9]+)*$

# SSM Paramter Store Key
  KeyCidrBlock:
    Description: Specify the SSM Parameter Store Key for the VPC CidrBlock.
    Type: AWS::SSM::Parameter::Name
    Default: /vpc/cidrblock

  KeyPersonalIp1:
    Description: Specify the SSM Parameter Store Key for the PersonalIp1.
    Type: AWS::SSM::Parameter::Name
    Default: /person1/ip

  KeyPersonalIpDescription1:
    Description: Specify the SSM Parameter Store Key for the PersonalIpDescription1.
    Type: AWS::SSM::Parameter::Name
    Default: /person1/description

  KeyPersonalIp2:
    Description: Specify the SSM Parameter Store Key for the PersonalIp2.
    Type: AWS::SSM::Parameter::Name
    Default: /person2/ip

  KeyPersonalIpDescription2:
    Description: Specify the SSM Parameter Store Key for the PersonalIpDescription2.
    Type: AWS::SSM::Parameter::Name
    Default: /person2/description

  KeyEbsVolumeSize:
    Description: Specify the SSM Parameter Store Key for the EBS Volume Size.
    Type: AWS::SSM::Parameter::Name
    Default: /ec2/ebsvolumesize

  KeyEbsVolumeType:
    Description: Specify the SSM Parameter Store Key for the EBS Volume Type.
    Type: AWS::SSM::Parameter::Name
    Default: /ec2/ebsvolumetype

  KeyImageId:
    Description: Specify the SSM Parameter Store Key for the Instance Image ID.
    Type: AWS::SSM::Parameter::Name
    Default: /ec2/imageid

  KeyInstanceType:
    Description: Specify the SSM Parameter Store Key for the Instance Type.
    Type: AWS::SSM::Parameter::Name
    Default: /ec2/instancetype

  KeyIamInstanceProfile:
    Description: Specify the SSM Parameter Store Key for the IAM Instence Profile.
    Type: AWS::SSM::Parameter::Name
    Default: /ec2/iaminstanceprofile

  KeySystemIpAddress:
    Description: Specify the SSM Parameter Store Key for the SystemIpAddress.
    Type: AWS::SSM::Parameter::Name
    Default: /system/ipaddress

  KeySnsTopicSubscriber:
    Description: Specify the SSM Parameter Store Key for the SNS Topic Subscriber.
    Type: AWS::SSM::Parameter::Name
    Default: /sns/subscriber

# Condition
  ConditionEc2ApiTermination:
    Description: Toggle whether or not to enable the DisableApiTermination property of EC2.
    Type: String
    AllowedValues: [ true, false ]
    Default: false

  ConditionNatGatewayA:
    Description: Toggle whether or not to create NatGatewayA.
    Type: String
    AllowedValues: [true, false]
    Default: true

  ConditionNatGatewayC:
    Description: Toggle whether or not to create NatGatewayC.
    Type: String
    AllowedValues: [true, false]
    Default: false

  ConditionTestTarget:
    Description: Toggle whether or not to create TestTarget.
    Type: String
    AllowedValues: [true, false]
    Default: true

  ConditionOpx:
    Description: Toggle whether or not to create Opx.
    Type: String
    AllowedValues: [true, false]
    Default: true

  ConditionEc2InstanceTestTarget:
    Description: Toggle whether or not to create Ec2InstanceTestTarget.
    Type: String
    AllowedValues: [true, false]
    Default: true

Conditions:
  ConditionIngressPersonalIp1: !Not [!Equals [!Ref KeyPersonalIp1, '']]
  ConditionNatGatewayA: !Equals [!Ref ConditionNatGatewayA, 'true']
  ConditionNatGatewayC: !Equals [!Ref ConditionNatGatewayC, 'true']
  ConditionTestTarget: !Equals [!Ref ConditionTestTarget, 'true']
  ConditionOpx: !Equals [!Ref ConditionOpx, 'true']
  ConditionEc2InstanceTestTarget: !Equals [!Ref ConditionEc2InstanceTestTarget, 'true']

Resources:
#------------------------------#
# VPC
#------------------------------#
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub '{{resolve:ssm:${KeyCidrBlock}}}'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}

#------------------------------#
# Internet Gateway
#------------------------------#
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}
  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

#------------------------------#
# Public Subnet
#------------------------------#
  SubnetPubA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref Vpc
      CidrBlock: !Select [0, !Cidr [!GetAtt Vpc.CidrBlock, 1, 8]]
        # !Select 
        # - 0
        # - Fn::Cidr: [ !GetAtt Vpc.CidrBlock, 1, 8 ]
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}

  SubnetPubC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      VpcId: !Ref Vpc
      CidrBlock:
        !Select 
        - 1
        - Fn::Cidr: [ !GetAtt Vpc.CidrBlock, 2, 8 ]
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}
  
#------------------------------#
# Private Subnet
#------------------------------#
  SubnetPriA1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref Vpc
      CidrBlock: 
        !Select 
        - 2
        - Fn::Cidr: [ !GetAtt Vpc.CidrBlock, 3, 8]
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}

  SubnetPriC1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      VpcId: !Ref Vpc
      CidrBlock: 
        !Select 
        - 3
        - Fn::Cidr: [ !GetAtt Vpc.CidrBlock, 4, 8]
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}
  SubnetPriA2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref Vpc
      CidrBlock: 
        !Select 
        - 4
        - Fn::Cidr: [ !GetAtt Vpc.CidrBlock, 5, 8]
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}

  SubnetPriC2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      VpcId: !Ref Vpc
      CidrBlock: 
        !Select 
        - 5
        - Fn::Cidr: [ !GetAtt Vpc.CidrBlock, 6, 8]
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}

#------------------------------#
# NatGateway
#------------------------------#
  NatGatewayA:
    Condition: ConditionNatGatewayA
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EipNatGatewayA.AllocationId
      SubnetId: !Ref SubnetPubA
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}

  NatGatewayC:
    Condition: ConditionNatGatewayC
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EipNatGatewayC.AllocationId
      SubnetId: !Ref SubnetPubC
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}

#------------------------------#
# EIP
#------------------------------#
  EipNatGatewayA:
    Condition: ConditionNatGatewayA
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}

  EipNatGatewayC:
    Condition: ConditionNatGatewayC
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}

#------------------------------#
# Route Table
#------------------------------#
  RouteTableVpc:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}

  RouteTablePriA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}

  RouteTablePriC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}

#------------------------------#
# Route
#------------------------------#
  RouteInternetGateway:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTableVpc

  RouteNatGatewayA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref RouteTablePriA

  RouteNatGatewayC:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayC
      RouteTableId: !Ref RouteTablePriC

#------------------------------#
# Subnet Association
#------------------------------#
  SubnetRouteTableAssociationPubA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableVpc
      SubnetId: !Ref SubnetPubA

  SubnetRouteTableAssociationPubC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableVpc
      SubnetId: !Ref SubnetPubC

  SubnetRouteTableAssociationPriA1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePriA
      SubnetId: !Ref SubnetPriA1

  SubnetRouteTableAssociationPriC1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePriC
      SubnetId: !Ref SubnetPriC1

  SubnetRouteTableAssociationPriA2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePriA
      SubnetId: !Ref SubnetPriA2

  SubnetRouteTableAssociationPriC2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePriC
      SubnetId: !Ref SubnetPriC2

#------------------------------#
# Endpoint
#------------------------------#
  VpcEndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
      RouteTableIds:
        - !Ref RouteTablePriA
        - !Ref RouteTablePriC
      ServiceName: com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref Vpc

#------------------------------#
# Security Group
#------------------------------#
  SecurityGroupTestTarget:
    Condition: ConditionTestTarget
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub secgroup-${Stack}-${Env}-test-target
      GroupDescription: !Sub Security group for ${Stack}-${Env} test target.
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - 
          IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: !Sub '{{resolve:ssm:${KeySystemIpAddress}}}'
          Description: Access from system.
        - 
          IpProtocol: tcp
          FromPort: 4000
          ToPort: 4000
          CidrIp: !Sub '{{resolve:ssm:${KeySystemIpAddress}}}'
          Description: Access from system.
        - 
          IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: !GetAtt SecurityGroupAlb.GroupId
          Description: Access from system.
        - 
          IpProtocol: tcp
          FromPort: 4000
          ToPort: 4000
          CidrIp: !GetAtt SecurityGroupAlb.GroupId
          Description: Access from system.
        - 
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !GetAtt SecurityGroupAlb.GroupId
          Description: Access from system.
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}

  SecurityGroupTestTargetOpx:
    Condition: ConditionOpx
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub secgroup-${Stack}-${Env}-test-target-opx
      GroupDescription: !Sub Security group for ${Stack}-${Env} test target.
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 81
        ToPort: 81
        SourceSecurityGroupId: !GetAtt SecurityGroupAlb.GroupId
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}

  SecurityGroupAlb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub secgroup-${Stack}-${Env}-alb
      GroupDescription: !Sub Security group for ${Stack}-${Env} alb.
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - !If 
          - ConditionIngressPersonalIp1
          - IpProtocol: tcp
            CidrIp: !Sub '{{resolve:ssm:${KeyPersonalIp1}}}'
            FromPort: 443
            ToPort: 443
            Description: !Sub '{{resolve:ssm:${KeyPersonalIpDescription1}}}'
          - !Ref AWS::NoValue
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}

#------------------------------#
# EC2
#------------------------------#
  Ec2InstanceTestTarget:
    Condition: ConditionEc2InstanceTestTarget
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Sub '{{resolve:ssm:${KeyEbsVolumeSize}}}'
            VolumeType: !Sub '{{resolve:ssm:${KeyEbsVolumeType}}}'
            Encrypted: true
      DisableApiTermination: !Ref ConditionEc2ApiTermination
      IamInstanceProfile: !Sub '{{resolve:ssm:${KeyIamInstanceProfile}}}'
      ImageId: !Sub '{{resolve:ssm:${KeyImageId}}}'
      InstanceType: !Sub '{{resolve:ssm:${KeyInstanceType}}}'
      Monitoring: true
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref NetworkInterfaceTestTarget
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash 
          apt update -y
          apt upgrade -y
          mkdir -p /opt/aws/bin
          apt install -y wget
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb -O /tmp/amazon-cloudwatch-agent.deb
          dpkg -i /tmp/amazon-cloudwatch-agent.deb
          apt install -y ruby-full
          wget https://aws-codedeploy-ap-northeast-1.s3.ap-northeast-1.amazonaws.com/latest/install
          chmod +x ./install
          ./install/ auto > /tmp/logfile
          service codedeploy-agent restart
          apt update -y
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource Ec2InstanceTestTarget --region ${AWS::Region} --configsets default
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource Ec2InstanceTestTarget --region ${AWS::Region}
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}

#------------------------------#
# NetworkInterface
#------------------------------#
  NetworkInterfaceTestTarget:
    Condition: ConditionTestTarget
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetPriA1
      GroupSet:
        - !Ref SecurityGroupTestTarget

#------------------------------#
# SNS Topic
#------------------------------#
  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${Stack}-${Env}-sns-topic
      Subscription: !Sub '{{resolve:ssm:${KeySnsTopicSubscriber}}}'
      Protocol: sqs
      RawMessageDelivery: 'true'
      TopicName: !Sub ${Stack}-${Env}-sns-topic
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}

#------------------------------#
# SNS Subscription
#------------------------------#
  SnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt SqsQueue.Arn
      Protocol: sqs
      RawMessageDelivery: 'true'
      TopicArn: !Ref SnsTopic

#------------------------------#
# SQS
#------------------------------#
  SqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: false
      DelaySeconds: 0
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 345600
      QueueName: !Sub ${Stack}-${Env}-sqs-queue
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt SqsQueueDeadLetterQueue.Arn
        maxReceiveCount: 5
      VisibilityTimeout: 30
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}

  SqsQueueDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: false
      Tags: 
        - Key: Env
          Value: !Ref Env
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Cost
          Value: !Sub ${Env}-${Stack}

#------------------------------#
# CloudWatchAlarm
#------------------------------#
# StatusCheckFailed
  CloudWatchAlarmTestTargetStatusCheckFailed:
    Condition: ConditionEc2InstanceTestTarget
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions: 
        - !Ref SnsTopic 
      AlarmName: !Sub ${Stack}-${Env}-test-target-ec2-status-check-failed
      ComparisonOperator: GreaterThanThreshold
      Dimensions: 
        - Name: InstanceId
          Value: !Ref Ec2InstanceTestTarget
      EvaluationPeriods: 2
      MetricName: StatusCheckFailed
      Namespace: AWS/EC2
      Period: 300
      Statistic: Average
      Threshold: 0
      TreatMissingData: missing

# CPUUtilization
  CloudWatchAlarmTestTargetCpuUtilization:
    Condition: ConditionEc2InstanceTestTarget
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions: 
        - !Ref SnsTopic 
      AlarmName: !Sub ${Stack}-${Env}-ec2-cpu-utilization
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions: 
        - Name: InstanceId
          Value: !Ref Ec2InstanceTestTarget
      EvaluationPeriods: 5
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 70
      TreatMissingData: missing

# MemoryUtilization
  CloudWatchAlarmTestTargetCpuUtilization:
    Condition: ConditionEc2InstanceTestTarget
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions: 
        - !Ref SnsTopic 
      AlarmName: !Sub ${Stack}-${Env}-ec2-memory-utilization
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions: 
        - Name: InstanceId
          Value: !Ref Ec2InstanceTestTarget
        - Name: ImageId
          Value: !Sub '{{resolve:ssm:${KeyImageId}}}'
        - Name: InstanceType
          Value: t3.small
      EvaluationPeriods: 5
      MetricName: mem_used_percent
      Namespace: CWAgent/Server
      Period: 60
      Statistic: Average
      Threshold: 80
      TreatMissingData: missing

# DiskUtilization
  CloudWatchAlarmTestTargetCpuUtilization:
    Condition: ConditionEc2InstanceTestTarget
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions: 
        - !Ref SnsTopic 
      AlarmName: !Sub ${Stack}-${Env}-ec2-disk-utilization
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions: 
        - Name: path
          Value: '/'
        - Name: InstanceId
          Value: !Ref Ec2InstanceTestTarget
        - Name: ImageId
          Value: !Sub '{{resolve:ssm:${KeyImageId}}}'
        - Name: InstanceType
          Value: t3.small
        - Name: device
          Value: nvme0n1p1
        - Name: fstype
          Value: ext4
      EvaluationPeriods: 6
      MetricName: disk_used_percent
      Namespace: CWAgent/Server
      Period: 300
      Statistic: Average
      Threshold: 90
      TreatMissingData: missing
